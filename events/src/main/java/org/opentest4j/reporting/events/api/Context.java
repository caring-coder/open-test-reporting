package org.opentest4j.reporting.events.api;

import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class Context {

    static Context create(QualifiedName rootElement, NamespaceRegistry namespaceRegistry) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();
            Context context = new Context(document, namespaceRegistry);
            document.appendChild(createRoot(rootElement, namespaceRegistry, context));
            return context;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static org.w3c.dom.Element createRoot(QualifiedName rootElement, NamespaceRegistry namespaceRegistry, Context context) {
        org.w3c.dom.Element root = context.createElement(rootElement);
        namespaceRegistry.getAdditionalNamespaces()
                .forEach(namespace -> root.setAttribute("xmlns:" + namespaceRegistry.getPrefix(namespace).orElseThrow(IllegalStateException::new), namespace.getUri()));
        return root;
    }

    private final ConcurrentMap<QualifiedName, String> prefixedNames = new ConcurrentHashMap<>();
    private final Document document;
    private final NamespaceRegistry namespaceRegistry;

    private Context(Document document, NamespaceRegistry namespaceRegistry) {
        this.document = document;
        this.namespaceRegistry = namespaceRegistry;
    }

    Document getDocument() {
        return document;
    }

    org.w3c.dom.Element createElement(QualifiedName qualifiedName) {
        return namespaceRegistry.getPrefix(qualifiedName.getNamespace()).isPresent()
                ? document.createElementNS(qualifiedName.getNamespace().getUri(), prefixed(qualifiedName))
                : document.createElement(qualifiedName.getName());
    }

    String prefixed(QualifiedName qualifiedName) {
        Optional<String> prefix = namespaceRegistry.getPrefix(qualifiedName.getNamespace());
        return prefixedNames.computeIfAbsent(qualifiedName, __ -> prefix.map(it -> it + ":" + qualifiedName.getName()).orElse(qualifiedName.getName()));
    }
}
