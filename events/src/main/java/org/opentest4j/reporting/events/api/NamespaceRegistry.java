package org.opentest4j.reporting.events.api;

import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

public class NamespaceRegistry implements Iterable<Namespace> {

    public static NamespaceRegistry of(Map<Namespace, String> namespaces) {
        return new NamespaceRegistry(namespaces);
    }

    public static Builder builder() {
        return new Builder();
    }

    private final Map<Namespace, String> namespaces;

    private NamespaceRegistry(Map<Namespace, String> namespaces) {
        this.namespaces = Collections.unmodifiableMap(new LinkedHashMap<>(namespaces));
    }

    public String getPrefix(Namespace namespace) {
        return namespaces.get(namespace);
    }

    @Override
    public Iterator<Namespace> iterator() {
        return namespaces.keySet().iterator();
    }

    public boolean containsUri(String uri) {
        return namespaces.containsKey(Namespace.of(uri));
    }

    public static class Builder {

        private final Map<Namespace, String> namespaces = new LinkedHashMap<>();

        private Builder() {
        }

        public Builder add(Namespace namespace, String prefix) {
            if (namespaces.containsKey(namespace)) {
                throw new IllegalStateException("Namespace has already been added previously: " + namespace);
            }
            namespaces.put(namespace, prefix);
            return this;
        }

        public NamespaceRegistry build() {
            return NamespaceRegistry.of(namespaces);
        }

    }

}
