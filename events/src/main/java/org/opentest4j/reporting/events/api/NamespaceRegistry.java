package org.opentest4j.reporting.events.api;

import org.opentest4j.reporting.schema.Namespace;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

public class NamespaceRegistry {

    static final String XSI_PREFIX = "xsi";

    public static Builder builder(Namespace defaultNamespace) {
        return new Builder(defaultNamespace, null);
    }

    public static Builder builder(Namespace defaultNamespace, String schemaLocation) {
        return new Builder(defaultNamespace, schemaLocation);
    }

    private final Namespace defaultNamespace;
    private final Map<Namespace, String> schemaLocations;
    private final Map<Namespace, String> additionalNamespaces;

    private NamespaceRegistry(Namespace defaultNamespace, Map<Namespace, String> schemaLocations, Map<Namespace, String> additionalNamespaces) {
        this.defaultNamespace = defaultNamespace;
        this.schemaLocations = Collections.unmodifiableMap(new LinkedHashMap<>(schemaLocations));
        this.additionalNamespaces = Collections.unmodifiableMap(new LinkedHashMap<>(additionalNamespaces));
    }

    public Namespace getDefaultNamespace() {
        return defaultNamespace;
    }

    public Set<Namespace> getAdditionalNamespaces() {
        return additionalNamespaces.keySet();
    }

    public Optional<String> getPrefix(Namespace namespace) {
        return Optional.ofNullable(additionalNamespaces.get(namespace));
    }

    public Map<Namespace, String> getSchemaLocations() {
        return schemaLocations;
    }

    public boolean containsUri(String uri) {
        return defaultNamespace.getUri().equals(uri) || additionalNamespaces.containsKey(Namespace.of(uri));
    }

    public static class Builder {

        private final Namespace defaultNamespace;
        private final Map<Namespace, String> schemaLocations = new LinkedHashMap<>();
        private final Map<Namespace, String> additionalNamespaces = new LinkedHashMap<>();

        private Builder(Namespace defaultNamespace, String schemaLocation) {
            this.defaultNamespace = defaultNamespace;
            if (schemaLocation != null) {
                schemaLocations.put(defaultNamespace, schemaLocation);
            }
        }

        public Builder add(String prefix, Namespace namespace) {
            return add(prefix, namespace, null);
        }

        public Builder add(String prefix, Namespace namespace, String schemaLocation) {
            if (additionalNamespaces.containsKey(namespace) || defaultNamespace.equals(namespace)) {
                throw new IllegalStateException("Namespace has already been added previously: " + namespace);
            }
            additionalNamespaces.put(namespace, prefix);
            if (schemaLocation != null) {
                schemaLocations.put(namespace, schemaLocation);
            }
            return this;
        }

        public NamespaceRegistry build() {
            if (!schemaLocations.isEmpty()) {
                add(XSI_PREFIX, Namespace.XML_SCHEMA_INSTANCE);
            }
            return new NamespaceRegistry(defaultNamespace, schemaLocations, additionalNamespaces);
        }

    }

}
