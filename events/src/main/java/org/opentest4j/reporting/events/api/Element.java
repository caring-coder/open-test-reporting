package org.opentest4j.reporting.events.api;

import org.opentest4j.reporting.schema.Namespace;
import org.opentest4j.reporting.schema.QualifiedName;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;

import java.util.function.Consumer;

public class Element<T extends Element<T>> implements Appendable<T> {

    private final Context context;
    private final Namespace namespace;
    final org.w3c.dom.Element domElement;

    public Element(Context context, QualifiedName qualifiedName) {
        this.context = context;
        this.namespace = qualifiedName.getNamespace();
        this.domElement = context.createElement(qualifiedName);
    }

    org.w3c.dom.Element getDomElement() {
        return domElement;
    }

    public Element<T> withContent(String value) {
        domElement.setTextContent(value);
        return this;
    }

    @SuppressWarnings("UnusedReturnValue")
    public Element<T> withCDataSection(String value) {
        domElement.appendChild(document().createCDATASection(value));
        return this;
    }

    public Element<T> withAttribute(QualifiedName qualifiedName, String value) {
        Attr attr = createAttr(qualifiedName);
        attr.setValue(value);
        domElement.setAttributeNode(attr);
        return this;
    }

    private Attr createAttr(QualifiedName qualifiedName) {
        return namespace.equals(qualifiedName.getNamespace()) //
                ? document().createAttribute(qualifiedName.getName()) //
                : document().createAttributeNS(qualifiedName.getNamespace().getUri(), context.prefixed(qualifiedName));
    }

    private Document document() {
        return context.getDocument();
    }

    @Override
    public <C extends ChildElement<T, ? super C>> C append(Factory<C> creator, Consumer<? super C> configurer) {
        C child = creator.createAndConfigure(context, configurer);
        domElement.appendChild(child.domElement);
        return child;
    }

    @Override
    public String toString() {
        return "Element{domElement=" + domElement + '}';
    }

}
