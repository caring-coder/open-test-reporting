package org.opentest4j.reporting.events.node;

import org.opentest4j.reporting.events.api.Attribute;
import org.opentest4j.reporting.events.api.Context;
import org.opentest4j.reporting.events.api.QualifiedName;

import java.time.Instant;

public final class Started extends Event {

    public static final QualifiedName ELEMENT = QualifiedName.of(EventFactory.NAMESPACE, "started");
    private static final QualifiedName NAME = QualifiedName.of(EventFactory.NAMESPACE, "name");
    private static final QualifiedName PARENT_ID = QualifiedName.of(EventFactory.NAMESPACE, "parentId");

    Started(Context context) {
        super(context, ELEMENT);
    }

    @Override
    public Started withId(String id) {
        super.withId(id);
        return this;
    }

    @Override
    public Started withTime(Instant time) {
        super.withTime(time);
        return this;
    }

    public Started withName(String name) {
        withAttribute(NAME, name);
        return this;
    }

    @SuppressWarnings("UnusedReturnValue")
    public Started withParentId(String parentId) {
        withAttribute(Attribute.of(PARENT_ID), parentId);
        return this;
    }
}
