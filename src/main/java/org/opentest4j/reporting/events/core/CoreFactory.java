package org.opentest4j.reporting.events.core;

import org.opentest4j.reporting.events.api.Attribute;
import org.opentest4j.reporting.events.api.Element;
import org.opentest4j.reporting.events.api.Factory;

import java.util.Optional;

import static org.opentest4j.reporting.events.core.FilePosition.COLUMN;
import static org.opentest4j.reporting.events.core.FilePosition.LINE;

public class CoreFactory {

    private CoreFactory() {
    }

    public static Factory<Started> started(String id, String name) {
        return context -> new Started(context).withId(id).withName(name);
    }

    public static Factory<Reported> reported(String id) {
        return context -> new Reported(context).withId(id);
    }

    public static Factory<Finished> finished(String id) {
        return context -> new Finished(context).withId(id);
    }

    public static Factory<Sources> sources() {
        return Sources::new;
    }

    public static Factory<Metadata> metadata() {
        return Metadata::new;
    }

    public static Factory<Tags> tags() {
        return Tags::new;
    }

    public static Factory<Tag> tag(String value) {
        return context -> new Tag(context, value);
    }

    public static Factory<Attachments> attachments() {
        return Attachments::new;
    }

    public static Factory<Data> data() {
        return Data::new;
    }

    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
    public static <P extends Element<P>> Factory<FilePosition<P>> filePosition(int line, Optional<Integer> column) {
        return context -> {
            FilePosition<P> filePosition = new FilePosition<>(context);
            filePosition.withAttribute(LINE, String.valueOf(line));
            column.ifPresent(value -> filePosition.withAttribute(Attribute.of(COLUMN), value.toString()));
            return filePosition;
        };
    }
}
