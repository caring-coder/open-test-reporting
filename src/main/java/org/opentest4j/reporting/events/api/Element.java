package org.opentest4j.reporting.events.api;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;

import java.util.function.Consumer;

public class Element<T extends Element<T>> {

    private final Context context;
    private final Namespace namespace;
    final org.w3c.dom.Element domElement;

    public Element(Context context, QualifiedName qualifiedName) {
        this.context = context;
        this.namespace = qualifiedName.getNamespace();
        this.domElement = namespace.isDefault() //
                ? document().createElement(qualifiedName.getName()) //
                : document().createElementNS(namespace.getUri(), prefixed(qualifiedName));
    }

    org.w3c.dom.Element getDomElement() {
        return domElement;
    }

    public Element<T> addContent(String value) {
        domElement.appendChild(document().createTextNode(value));
        return this;
    }

    public Element<T> withAttribute(Attribute<? super T> attribute, String value) {
        return withAttribute(attribute.getQualifiedName(), value);
    }

    public Element<T> withAttribute(QualifiedName qualifiedName, String value) {
        Attr attr = namespace.equals(qualifiedName.getNamespace()) //
                ? document().createAttribute(qualifiedName.getName()) //
                : document().createAttributeNS(qualifiedName.getNamespace().getUri(), prefixed(qualifiedName));
        attr.setValue(value);
        domElement.setAttributeNode(attr);
        return this;
    }

    private String prefixed(QualifiedName qualifiedName) {
        return context.getNamespaceRegistry().getPrefix(qualifiedName.getNamespace()) + ":" + qualifiedName.getName();
    }

    private Document document() {
        return context.getDocument();
    }

    public <C extends ChildElement<T, C>> C addChild(Factory<C> creator) {
        return addChild(creator, __ -> {});
    }

    public <C extends ChildElement<T, C>> C addChild(Factory<C> creator, Consumer<C> consumer) {
        C child = creator.create(context);
        consumer.accept(child);
        domElement.appendChild(child.domElement);
        return child;
    }

    @Override
    public String toString() {
        return "Element{domElement=" + domElement + '}';
    }

}
