package org.opentest4j.reporting;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class Element<T extends Element<T>> {

    public static Builder builder(NamespaceRegistry namespaceRegistry) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();
            org.w3c.dom.Element root = document.createElement("events");
            document.appendChild(root);
            Context context = new Context(document, namespaceRegistry);
            namespaceRegistry.forEach(namespace -> root.setAttribute("xmlns:" + namespaceRegistry.getPrefix(namespace), namespace.getUri()));
            return new Builder(context);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static class Builder {
        private final Context context;

        private Builder(Context context) {
            this.context = context;
        }

        public Started started(String id) {
            return new Started(context).id(id);
        }

        public Finished finished(String id) {
            return new Finished(context).id(id);
        }

        public <T extends Element<T>> Element<T> element(QualifiedName qualifiedName) {
            return new Element<>(context, qualifiedName);
        }
    }

    private final Context context;
    private final org.w3c.dom.Element domElement;

    Element(Context context, QualifiedName qualifiedName) {
        this.context = context;
        domElement = qualifiedName.getNamespace().isDefault() //
                ? document().createElement(qualifiedName.getName()) //
                : document().createElementNS(qualifiedName.getNamespace().getUri(), prefixed(qualifiedName));
    }

    org.w3c.dom.Element getDomElement() {
        return domElement;
    }

    public Element<T> attribute(Attribute<? super T> attribute, String value) {
        QualifiedName qualifiedName = attribute.getQualifiedName();
        Attr attr = qualifiedName.getNamespace().isDefault() //
                ? document().createAttribute(qualifiedName.getName()) //
                : document().createAttributeNS(qualifiedName.getNamespace().getUri(), prefixed(qualifiedName));
        attr.setValue(value);
        domElement.setAttributeNode(attr);
        return this;
    }

    private String prefixed(QualifiedName qualifiedName) {
        return context.getNamespaceRegistry().getPrefix(qualifiedName.getNamespace()) + ":" + qualifiedName.getName();
    }

    private Document document() {
        return context.getDocument();
    }

    public Element<T> child(Element<?> child) {
        domElement.appendChild(child.domElement);
        return this;
    }

    @Override
    public String toString() {
        return "Element{domElement=" + domElement + '}';
    }

}
