package org.opentest4j.reporting.cli;

import org.xml.sax.SAXException;
import picocli.CommandLine.Command;
import picocli.CommandLine.Parameters;

import javax.xml.XMLConstants;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

@Command(
        name = "validate",
        description = "Validates XML report files"
)
public class ValidateCommand implements Runnable {

    @Parameters(arity = "1..*")
    List<Path> xmlFiles;

    @Override
    public void run() {
        Validator validator = CachedSchema.EVENTS.newValidator();
        for (Path xmlFile : xmlFiles) {
            try (InputStream in = Files.newInputStream(xmlFile)) {
                validator.validate(new StreamSource(in));
            } catch (Exception e) {
                throw new RuntimeException("Failed to validate " + xmlFile, e);
            }
        }
    }

    private enum CachedSchema {

        EVENTS("/org/opentest4j/reporting/schema/events.xsd");

        private final Schema schema;

        CachedSchema(String resourcePath) {
            URL schemaFile = ValidateCommand.class.getResource(resourcePath);
            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            try {
                this.schema = schemaFactory.newSchema(schemaFile);
            }
            catch (SAXException e) {
                throw new RuntimeException("Failed to create schema using " + schemaFile, e);
            }
        }

        Validator newValidator() {
            return schema.newValidator();
        }
    }
}
