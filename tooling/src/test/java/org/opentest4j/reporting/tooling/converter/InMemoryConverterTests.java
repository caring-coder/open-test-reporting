package org.opentest4j.reporting.tooling.converter;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.opentest4j.reporting.events.api.DocumentWriter;
import org.opentest4j.reporting.events.api.NamespaceRegistry;
import org.opentest4j.reporting.events.root.Events;
import org.opentest4j.reporting.schema.Namespace;
import org.xmlunit.assertj3.XmlAssert;

import java.nio.file.Path;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import java.util.function.Consumer;

import static org.opentest4j.reporting.events.core.CoreFactory.cpuCores;
import static org.opentest4j.reporting.events.core.CoreFactory.infrastructure;
import static org.opentest4j.reporting.events.core.CoreFactory.metadata;
import static org.opentest4j.reporting.events.core.CoreFactory.result;
import static org.opentest4j.reporting.events.core.CoreFactory.tag;
import static org.opentest4j.reporting.events.core.CoreFactory.tags;
import static org.opentest4j.reporting.events.core.Result.Status.SUCCESSFUL;
import static org.opentest4j.reporting.events.root.RootFactory.finished;
import static org.opentest4j.reporting.events.root.RootFactory.started;

class InMemoryConverterTests {

    static final NamespaceRegistry NAMESPACE_REGISTRY = NamespaceRegistry.builder(Namespace.REPORTING_CORE)
            .add("e", Namespace.REPORTING_EVENTS)
            .add("java", Namespace.REPORTING_JAVA)
            .build();

    @TempDir
    Path tempDir;

    @Test
    void convertsInfrastructureSection() throws Exception {
        var sourceFile = tempDir.resolve("events.xml");
        var targetFile = tempDir.resolve("hierarchy.xml");
        writeXml(sourceFile, writer -> writer.append(infrastructure(), infrastructure -> infrastructure.append(cpuCores(42))));

        new InMemoryConverter().convert(sourceFile, targetFile);

        assertThat(targetFile).valueByXPath("//*/c:infrastructure/c:cpuCores").isEqualTo(42);
    }

    @Test
    void convertsStartedAndFinishedEvents() throws Exception {
        var sourceFile = tempDir.resolve("events.xml");
        var targetFile = tempDir.resolve("hierarchy.xml");
        var duration = Duration.ofMillis(42);
        var startTime = Instant.now().minus(duration);
        writeXml(sourceFile, writer -> {
            writer.append(started("1", startTime, "container"), started ->
                    started.append(metadata(), metadata ->
                            metadata.append(tags(), tags ->
                                    tags.append(tag("a")))));
            writer.append(started("2", startTime.plus(duration), "test"), started -> started.withParentId("1"));
            writer.append(finished("2", startTime.plus(duration.multipliedBy(2))));
            writer.append(finished("1", startTime.plus(duration.multipliedBy(3))), finished -> finished.append(result(SUCCESSFUL)));
        });

        new InMemoryConverter().convert(sourceFile, targetFile);

        assertThat(targetFile).nodesByXPath("//*/h:root")
                .haveAttribute("name", "container")
                .haveAttribute("start", startTime.toString())
                .haveAttribute("duration", duration.multipliedBy(3).toString());

        assertThat(targetFile).valueByXPath("//*/h:root/c:metadata/c:tags/c:tag").isEqualTo("a");
        assertThat(targetFile).valueByXPath("//*/h:root/c:result/@status").isEqualTo("SUCCESSFUL");

        assertThat(targetFile).nodesByXPath("//*/h:root/h:child")
                .haveAttribute("name", "test")
                .haveAttribute("start", startTime.plus(duration).toString())
                .haveAttribute("duration", duration.toString());
    }

    private void writeXml(Path eventsXmlFile, Consumer<DocumentWriter<Events>> action) throws Exception {
        try (var writer = Events.createDocumentWriter(NAMESPACE_REGISTRY, eventsXmlFile)) {
            action.accept(writer);
        }
    }

    private static XmlAssert assertThat(Path targetFile) {
        return XmlAssert.assertThat(targetFile)
                .withNamespaceContext(Map.of(
                        "h", Namespace.REPORTING_HIERARCHY.getUri(),
                        "c", Namespace.REPORTING_CORE.getUri()
                ));
    }
}
